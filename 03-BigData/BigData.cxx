// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file BigData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "BigData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>

using namespace eprosima::fastcdr::exception;

#include <utility>

BigData::BigData() {
    m_id = 0;

    memset(&m_array, 0, (500000) * 1);

}

BigData::~BigData() {
}

BigData::BigData(const BigData &x) {
    m_id = x.m_id;
    m_array = x.m_array;
}

BigData::BigData(BigData &&x) {
    m_id = x.m_id;
    m_array = std::move(x.m_array);
}

BigData &BigData::operator=(const BigData &x) {
    m_id = x.m_id;
    m_array = x.m_array;

    return *this;
}

BigData &BigData::operator=(BigData &&x) {
    m_id = x.m_id;
    m_array = std::move(x.m_array);

    return *this;
}

size_t BigData::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((500000) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t BigData::getCdrSerializedSize(const BigData &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((500000) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void BigData::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_id;
    scdr << m_array;
}

void BigData::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_id;
    dcdr >> m_array;
}

size_t BigData::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool BigData::isKeyDefined() {
    return false;
}

void BigData::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}