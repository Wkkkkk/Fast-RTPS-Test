// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file dataPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "dataPubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

Vec3PubSubType::Vec3PubSubType() {
    setName("Vec3");
    m_typeSize = static_cast<uint32_t>(Vec3::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = Vec3::isKeyDefined();
    size_t keyLength = Vec3::getKeyMaxCdrSerializedSize() > 16 ? Vec3::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

Vec3PubSubType::~Vec3PubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool Vec3PubSubType::serialize(void *data, SerializedPayload_t *payload) {
    Vec3 *p_type = static_cast<Vec3 *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool Vec3PubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    Vec3 *p_type = static_cast<Vec3 *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> Vec3PubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Vec3 *>(data))) + 4 /*encapsulation*/;
    };
}

void *Vec3PubSubType::createData() {
    return reinterpret_cast<void *>(new Vec3());
}

void Vec3PubSubType::deleteData(void *data) {
    delete (reinterpret_cast<Vec3 *>(data));
}

bool Vec3PubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    Vec3 *p_type = static_cast<Vec3 *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             Vec3::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || Vec3::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

StatusPubSubType::StatusPubSubType() {
    setName("Status");
    m_typeSize = static_cast<uint32_t>(Status::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = Status::isKeyDefined();
    size_t keyLength = Status::getKeyMaxCdrSerializedSize() > 16 ? Status::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

StatusPubSubType::~StatusPubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool StatusPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    Status *p_type = static_cast<Status *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool StatusPubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    Status *p_type = static_cast<Status *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> StatusPubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Status *>(data))) + 4 /*encapsulation*/;
    };
}

void *StatusPubSubType::createData() {
    return reinterpret_cast<void *>(new Status());
}

void StatusPubSubType::deleteData(void *data) {
    delete (reinterpret_cast<Status *>(data));
}

bool StatusPubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    Status *p_type = static_cast<Status *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             Status::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || Status::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

TargetPubSubType::TargetPubSubType() {
    setName("Target");
    m_typeSize = static_cast<uint32_t>(Target::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = Target::isKeyDefined();
    size_t keyLength = Target::getKeyMaxCdrSerializedSize() > 16 ? Target::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

TargetPubSubType::~TargetPubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool TargetPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    Target *p_type = static_cast<Target *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool TargetPubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    Target *p_type = static_cast<Target *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> TargetPubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Target *>(data))) + 4 /*encapsulation*/;
    };
}

void *TargetPubSubType::createData() {
    return reinterpret_cast<void *>(new Target());
}

void TargetPubSubType::deleteData(void *data) {
    delete (reinterpret_cast<Target *>(data));
}

bool TargetPubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    Target *p_type = static_cast<Target *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             Target::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || Target::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

