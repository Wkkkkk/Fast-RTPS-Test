// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file data.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATA_H_
#define _DATA_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>
#include <iostream>
#include <complex>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(data_SOURCE)
#define data_DllAPI __declspec( dllexport )
#else
#define data_DllAPI __declspec( dllimport )
#endif // data_SOURCE
#else
#define data_DllAPI
#endif
#else
#define data_DllAPI
#endif // _WIN32

namespace eprosima {
    namespace fastcdr {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure Vec3 defined by the user in the IDL file.
 * @ingroup DATA
 */
class Vec3 {
    friend Vec3 operator+(const Vec3 &l, const Vec3 &r) {
        double x = l.x() + r.x();
        double y = l.y() + r.y();
        double z = l.z() + r.z();

        return Vec3(x, y, z);
    }

public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Vec3();

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Vec3(double x, double y, double z);

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Vec3();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Vec3 that will be copied.
     */
    eProsima_user_DllExport Vec3(const Vec3 &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Vec3 that will be copied.
     */
    eProsima_user_DllExport Vec3(Vec3 &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Vec3 that will be copied.
     */
    eProsima_user_DllExport Vec3 &operator=(const Vec3 &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Vec3 that will be copied.
     */
    eProsima_user_DllExport Vec3 &operator=(Vec3 &&x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Vec3 that will be copied.
     */
    eProsima_user_DllExport Vec3 operator*(double r) {
        return Vec3(m_x * r, m_y * r, m_z * r);
    }

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    inline eProsima_user_DllExport void x(double _x) {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    inline eProsima_user_DllExport double x() const {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline eProsima_user_DllExport double &x() {
        return m_x;
    }

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    inline eProsima_user_DllExport void y(double _y) {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    inline eProsima_user_DllExport double y() const {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline eProsima_user_DllExport double &y() {
        return m_y;
    }

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    inline eProsima_user_DllExport void z(double _z) {
        m_z = _z;
    }

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    inline eProsima_user_DllExport double z() const {
        return m_z;
    }

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    inline eProsima_user_DllExport double &z() {
        return m_z;
    }

    inline eProsima_user_DllExport Vec3 &normalize() {
        double length2 = m_x * m_x + m_y * m_y + m_z * m_z;
        if (length2 > 1e-6) {
            double length = std::sqrt(length2);
            double factor = 1 / length;
            m_x *= factor;
            m_y *= factor;
            m_z *= factor;
        }
        return *this;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Vec3 &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    double m_x;
    double m_y;
    double m_z;
};

/*!
 * @brief This class represents the structure Status defined by the user in the IDL file.
 * @ingroup DATA
 */
class Status {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Status();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Status();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status(const Status &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status(Status &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status &operator=(const Status &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status &operator=(Status &&x);

    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    inline eProsima_user_DllExport void position(const Vec3 &_position) {
        m_position = _position;
    }

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    inline eProsima_user_DllExport void position(Vec3 &&_position) {
        m_position = std::move(_position);
    }

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    inline eProsima_user_DllExport const Vec3 &position() const {
        return m_position;
    }

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    inline eProsima_user_DllExport Vec3 &position() {
        return m_position;
    }

    /*!
     * @brief This function copies the value in member direction
     * @param _direction New value to be copied in member direction
     */
    inline eProsima_user_DllExport void direction(const Vec3 &_direction) {
        m_direction = _direction;
    }

    /*!
     * @brief This function moves the value in member direction
     * @param _direction New value to be moved in member direction
     */
    inline eProsima_user_DllExport void direction(Vec3 &&_direction) {
        m_direction = std::move(_direction);
    }

    /*!
     * @brief This function returns a constant reference to member direction
     * @return Constant reference to member direction
     */
    inline eProsima_user_DllExport const Vec3 &direction() const {
        return m_direction;
    }

    /*!
     * @brief This function returns a reference to member direction
     * @return Reference to member direction
     */
    inline eProsima_user_DllExport Vec3 &direction() {
        return m_direction;
    }

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    inline eProsima_user_DllExport void message(const std::string &_message) {
        m_message = _message;
    }

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    inline eProsima_user_DllExport void message(std::string &&_message) {
        m_message = std::move(_message);
    }

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    inline eProsima_user_DllExport const std::string &message() const {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    inline eProsima_user_DllExport std::string &message() {
        return m_message;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Status &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    Vec3 m_position;
    Vec3 m_direction;
    std::string m_message;
};

/*!
 * @brief This class represents the structure Target defined by the user in the IDL file.
 * @ingroup DATA
 */
class Target {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Target();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Target();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target(const Target &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target(Target &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target &operator=(const Target &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target &operator=(Target &&x);

    /*!
     * @brief This function sets a value in member find_target
     * @param _find_target New value for member find_target
     */
    inline eProsima_user_DllExport void find_target(bool _find_target) {
        m_find_target = _find_target;
    }

    /*!
     * @brief This function returns the value of member find_target
     * @return Value of member find_target
     */
    inline eProsima_user_DllExport bool find_target() const {
        return m_find_target;
    }

    /*!
     * @brief This function returns a reference to member find_target
     * @return Reference to member find_target
     */
    inline eProsima_user_DllExport bool &find_target() {
        return m_find_target;
    }

    /*!
     * @brief This function copies the value in member target_pos
     * @param _target_pos New value to be copied in member target_pos
     */
    inline eProsima_user_DllExport void target_pos(const Vec3 &_target_pos) {
        m_target_pos = _target_pos;
    }

    /*!
     * @brief This function moves the value in member target_pos
     * @param _target_pos New value to be moved in member target_pos
     */
    inline eProsima_user_DllExport void target_pos(Vec3 &&_target_pos) {
        m_target_pos = std::move(_target_pos);
    }

    /*!
     * @brief This function returns a constant reference to member target_pos
     * @return Constant reference to member target_pos
     */
    inline eProsima_user_DllExport const Vec3 &target_pos() const {
        return m_target_pos;
    }

    /*!
     * @brief This function returns a reference to member target_pos
     * @return Reference to member target_pos
     */
    inline eProsima_user_DllExport Vec3 &target_pos() {
        return m_target_pos;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Target &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    bool m_find_target;
    Vec3 m_target_pos;
};


/*!
 *
 * @brief simplify life.
 * @return
 */
inline std::ostream &operator<<(std::ostream &output, const Vec3 &p) {
    output << p.x() << " " << p.y() << " " << p.z();
    return output;
}

inline std::ostream &operator<<(std::ostream &output, const Status &s) {
    output << "position: " << s.position() << " direction: " << s.direction() << " message: " << s.message();
    return output;
}

inline std::ostream &operator<<(std::ostream &output, const Target &t) {
    output << "target: " << t.find_target() << " position: " << t.target_pos();
    return output;
}

#endif // _DATA_H_