// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file data.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "data.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>

using namespace eprosima::fastcdr::exception;

Vec3::Vec3() {
    m_x = 0.0;

    m_y = 0.0;

    m_z = 0.0;


}

Vec3::Vec3(double x, double y, double z) : m_x(x), m_y(y), m_z(z) {

}


Vec3::~Vec3() {
}

Vec3::Vec3(const Vec3 &x) {
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

Vec3::Vec3(Vec3 &&x) {
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

Vec3 &Vec3::operator=(const Vec3 &x) {
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;

    return *this;
}

Vec3 &Vec3::operator=(Vec3 &&x) {
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;

    return *this;
}

size_t Vec3::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t Vec3::getCdrSerializedSize(const Vec3 &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void Vec3::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_x;
    scdr << m_y;
    scdr << m_z;
}

void Vec3::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
}

size_t Vec3::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool Vec3::isKeyDefined() {
    return false;
}

void Vec3::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

Status::Status() : m_position(), m_direction(), m_message("abc") {


}

Status::~Status() {
}

Status::Status(const Status &x) {
    m_position = x.m_position;
    m_direction = x.m_direction;
    m_message = x.m_message;
}

Status::Status(Status &&x) {
    m_position = std::move(x.m_position);
    m_direction = std::move(x.m_direction);
    m_message = std::move(x.m_message);
}

Status &Status::operator=(const Status &x) {
    m_position = x.m_position;
    m_direction = x.m_direction;
    m_message = x.m_message;

    return *this;
}

Status &Status::operator=(Status &&x) {
    m_position = std::move(x.m_position);
    m_direction = std::move(x.m_direction);
    m_message = std::move(x.m_message);

    return *this;
}

size_t Status::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += Vec3::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Vec3::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t Status::getCdrSerializedSize(const Status &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += Vec3::getCdrSerializedSize(data.position(), current_alignment);
    current_alignment += Vec3::getCdrSerializedSize(data.direction(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void Status::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_position;
    scdr << m_direction;
    scdr << m_message;
}

void Status::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_position;
    dcdr >> m_direction;
    dcdr >> m_message;
}

size_t Status::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool Status::isKeyDefined() {
    return false;
}

void Status::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

Target::Target() {
    m_find_target = false;


}

Target::~Target() {
}

Target::Target(const Target &x) {
    m_find_target = x.m_find_target;
    m_target_pos = x.m_target_pos;
}

Target::Target(Target &&x) {
    m_find_target = x.m_find_target;
    m_target_pos = std::move(x.m_target_pos);
}

Target &Target::operator=(const Target &x) {
    m_find_target = x.m_find_target;
    m_target_pos = x.m_target_pos;

    return *this;
}

Target &Target::operator=(Target &&x) {
    m_find_target = x.m_find_target;
    m_target_pos = std::move(x.m_target_pos);

    return *this;
}

size_t Target::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += Vec3::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Target::getCdrSerializedSize(const Target &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += Vec3::getCdrSerializedSize(data.target_pos(), current_alignment);

    return current_alignment - initial_alignment;
}

void Target::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_find_target;
    scdr << m_target_pos;
}

void Target::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_find_target;
    dcdr >> m_target_pos;
}

size_t Target::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool Target::isKeyDefined() {
    return false;
}

void Target::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}