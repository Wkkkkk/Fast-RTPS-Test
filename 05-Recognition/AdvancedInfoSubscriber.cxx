// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AdvancedInfoSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>
#include <fastrtps/utils/eClock.h>

#include "AdvancedInfoSubscriber.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

AdvancedInfoSubscriber::AdvancedInfoSubscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

AdvancedInfoSubscriber::~AdvancedInfoSubscriber() { Domain::removeParticipant(mp_participant); }

bool AdvancedInfoSubscriber::init() {
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
    PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
    PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if (mp_participant == nullptr) {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType *>(&myType));

    // Create Subscriber

    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = "AdvancedInfoPubSubTopic";
    mp_subscriber = Domain::createSubscriber(mp_participant, Rparam, static_cast<SubscriberListener *>(&m_listener));
    if (mp_subscriber == nullptr) {
        return false;
    }
    return true;
}

void AdvancedInfoSubscriber::SubListener::onSubscriptionMatched(Subscriber *sub, MatchingInfo &info) {
    (void) sub;

    if (info.status == MATCHED_MATCHING) {
        n_matched++;
        std::cout << "Subscriber matched" << std::endl;
    } else {
        n_matched--;
        std::cout << "Subscriber unmatched" << std::endl;
    }
}

void AdvancedInfoSubscriber::SubListener::onNewDataMessage(Subscriber *sub) {
    // Take data
    mLineVec st;
    eClock clock;

    if (sub->takeNextData(&st, &m_info)) {
        if (m_info.sampleKind == ALIVE) {
            // Print your structure data here.
            ++n_msg;
            std::cout << "Sample received, count=" << n_msg << std::endl;

            // More info
            // message status: ALIVE
            std::cout << "---sampleKind: " << m_info.sampleKind << std::endl;

            // WriterGUID: Signature of the sender
            std::cout << "---WriterGUID: " << m_info.sample_identity.writer_guid() << " Message index: "
                      << m_info.sample_identity.sequence_number() << std::endl;

            // the moment the sample was encapsulated and sent
            auto timestamp_cp = m_info.sourceTimestamp;
            clock.setTimeNow(&timestamp_cp);
            std::cout << "---deliver time: " << timestamp_cp - m_info.sourceTimestamp << std::endl;

            // When several senders are writing the same data
            // this field can be used to determine which data is more reliable.
            std::cout << "---ownershipStrength: " << m_info.ownershipStrength << std::endl;
        }
    }
}

void AdvancedInfoSubscriber::run() {
    std::cout << "Waiting for Data, press Enter to stop the Subscriber. " << std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}

