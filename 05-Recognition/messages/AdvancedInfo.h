// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AdvancedInfo.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _ADVANCEDINFO_H_
#define _ADVANCEDINFO_H_

// TODO Poner en el contexto.
#include "BasicInfo.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AdvancedInfo_SOURCE)
#define AdvancedInfo_DllAPI __declspec( dllexport )
#else
#define AdvancedInfo_DllAPI __declspec( dllimport )
#endif // AdvancedInfo_SOURCE
#else
#define AdvancedInfo_DllAPI
#endif
#else
#define AdvancedInfo_DllAPI
#endif // _WIN32

namespace eprosima {
    namespace fastcdr {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure mPointArray defined by the user in the IDL file.
 * @ingroup ADVANCEDINFO
 */
class mPointArray {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mPointArray();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mPointArray();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mPointArray that will be copied.
     */
    eProsima_user_DllExport mPointArray(const mPointArray &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mPointArray that will be copied.
     */
    eProsima_user_DllExport mPointArray(mPointArray &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mPointArray that will be copied.
     */
    eProsima_user_DllExport mPointArray &operator=(const mPointArray &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mPointArray that will be copied.
     */
    eProsima_user_DllExport mPointArray &operator=(mPointArray &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline eProsima_user_DllExport void points(const std::array<mPoint, 500> &_points) {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline eProsima_user_DllExport void points(std::array<mPoint, 500> &&_points) {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline eProsima_user_DllExport const std::array<mPoint, 500> &points() const {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline eProsima_user_DllExport std::array<mPoint, 500> &points() {
        return m_points;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mPointArray &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint8_t m_id;
    std::array<mPoint, 500> m_points;
};

/*!
 * @brief This class represents the structure mLineArray defined by the user in the IDL file.
 * @ingroup ADVANCEDINFO
 */
class mLineArray {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mLineArray();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mLineArray();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mLineArray that will be copied.
     */
    eProsima_user_DllExport mLineArray(const mLineArray &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mLineArray that will be copied.
     */
    eProsima_user_DllExport mLineArray(mLineArray &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mLineArray that will be copied.
     */
    eProsima_user_DllExport mLineArray &operator=(const mLineArray &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mLineArray that will be copied.
     */
    eProsima_user_DllExport mLineArray &operator=(mLineArray &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline eProsima_user_DllExport void points(const std::array<mLine, 500> &_points) {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline eProsima_user_DllExport void points(std::array<mLine, 500> &&_points) {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline eProsima_user_DllExport const std::array<mLine, 500> &points() const {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline eProsima_user_DllExport std::array<mLine, 500> &points() {
        return m_points;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mLineArray &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint8_t m_id;
    std::array<mLine, 500> m_points;
};

/*!
 * @brief This class represents the structure mPointVec defined by the user in the IDL file.
 * @ingroup ADVANCEDINFO
 */
class mPointVec {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mPointVec();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mPointVec();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mPointVec that will be copied.
     */
    eProsima_user_DllExport mPointVec(const mPointVec &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mPointVec that will be copied.
     */
    eProsima_user_DllExport mPointVec(mPointVec &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mPointVec that will be copied.
     */
    eProsima_user_DllExport mPointVec &operator=(const mPointVec &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mPointVec that will be copied.
     */
    eProsima_user_DllExport mPointVec &operator=(mPointVec &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline eProsima_user_DllExport void points(const std::vector<mPoint> &_points) {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline eProsima_user_DllExport void points(std::vector<mPoint> &&_points) {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline eProsima_user_DllExport const std::vector<mPoint> &points() const {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline eProsima_user_DllExport std::vector<mPoint> &points() {
        return m_points;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mPointVec &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint8_t m_id;
    std::vector<mPoint> m_points;
};

/*!
 * @brief This class represents the structure mLineVec defined by the user in the IDL file.
 * @ingroup ADVANCEDINFO
 */
class mLineVec {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mLineVec();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mLineVec();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mLineVec that will be copied.
     */
    eProsima_user_DllExport mLineVec(const mLineVec &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mLineVec that will be copied.
     */
    eProsima_user_DllExport mLineVec(mLineVec &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mLineVec that will be copied.
     */
    eProsima_user_DllExport mLineVec &operator=(const mLineVec &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mLineVec that will be copied.
     */
    eProsima_user_DllExport mLineVec &operator=(mLineVec &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline eProsima_user_DllExport void points(const std::vector<mLine> &_points) {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline eProsima_user_DllExport void points(std::vector<mLine> &&_points) {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline eProsima_user_DllExport const std::vector<mLine> &points() const {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline eProsima_user_DllExport std::vector<mLine> &points() {
        return m_points;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mLineVec &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint8_t m_id;
    std::vector<mLine> m_points;
};

#endif // _ADVANCEDINFO_H_