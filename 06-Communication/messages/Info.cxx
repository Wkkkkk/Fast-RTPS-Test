// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Info.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Info.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>

using namespace eprosima::fastcdr::exception;

#include <utility>

SenderInfo::SenderInfo() {
    m_id = 0;


}

SenderInfo::~SenderInfo() {
}

SenderInfo::SenderInfo(const SenderInfo &x) {
    m_id = x.m_id;
    m_name = x.m_name;
}

SenderInfo::SenderInfo(SenderInfo &&x) {
    m_id = x.m_id;
    m_name = std::move(x.m_name);
}

SenderInfo &SenderInfo::operator=(const SenderInfo &x) {
    m_id = x.m_id;
    m_name = x.m_name;

    return *this;
}

SenderInfo &SenderInfo::operator=(SenderInfo &&x) {
    m_id = x.m_id;
    m_name = std::move(x.m_name);

    return *this;
}

size_t SenderInfo::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t SenderInfo::getCdrSerializedSize(const SenderInfo &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;


    return current_alignment - initial_alignment;
}

void SenderInfo::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_id;
    scdr << m_name;
}

void SenderInfo::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_id;
    dcdr >> m_name;
}

size_t SenderInfo::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool SenderInfo::isKeyDefined() {
    return false;
}

void SenderInfo::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

mPoint::mPoint() {

    m_id = 0;

    m_x = 0.0;

    m_y = 0.0;

    m_z = 0.0;


}

mPoint::~mPoint() {
}

mPoint::mPoint(const mPoint &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

mPoint::mPoint(mPoint &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

mPoint &mPoint::operator=(const mPoint &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;

    return *this;
}

mPoint &mPoint::operator=(mPoint &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;

    return *this;
}

size_t mPoint::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t mPoint::getCdrSerializedSize(const mPoint &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getCdrSerializedSize(data.sender_info(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void mPoint::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_sender_info;
    scdr << m_id;
    scdr << m_x;
    scdr << m_y;
    scdr << m_z;
}

void mPoint::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_sender_info;
    dcdr >> m_id;
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
}

size_t mPoint::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool mPoint::isKeyDefined() {
    return false;
}

void mPoint::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

mLine::mLine() {

    m_id = 0;


}

mLine::~mLine() {
}

mLine::mLine(const mLine &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_p1 = x.m_p1;
    m_p2 = x.m_p2;
}

mLine::mLine(mLine &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_p1 = std::move(x.m_p1);
    m_p2 = std::move(x.m_p2);
}

mLine &mLine::operator=(const mLine &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_p1 = x.m_p1;
    m_p2 = x.m_p2;

    return *this;
}

mLine &mLine::operator=(mLine &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_p1 = std::move(x.m_p1);
    m_p2 = std::move(x.m_p2);

    return *this;
}

size_t mLine::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += mPoint::getMaxCdrSerializedSize(current_alignment);
    current_alignment += mPoint::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t mLine::getCdrSerializedSize(const mLine &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getCdrSerializedSize(data.sender_info(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += mPoint::getCdrSerializedSize(data.p1(), current_alignment);
    current_alignment += mPoint::getCdrSerializedSize(data.p2(), current_alignment);

    return current_alignment - initial_alignment;
}

void mLine::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_sender_info;
    scdr << m_id;
    scdr << m_p1;
    scdr << m_p2;
}

void mLine::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_sender_info;
    dcdr >> m_id;
    dcdr >> m_p1;
    dcdr >> m_p2;
}

size_t mLine::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool mLine::isKeyDefined() {
    return false;
}

void mLine::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

mPointSeq::mPointSeq() {

    m_id = 0;


}

mPointSeq::~mPointSeq() {
}

mPointSeq::mPointSeq(const mPointSeq &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_points = x.m_points;
}

mPointSeq::mPointSeq(mPointSeq &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_points = std::move(x.m_points);
}

mPointSeq &mPointSeq::operator=(const mPointSeq &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_points = x.m_points;

    return *this;
}

mPointSeq &mPointSeq::operator=(mPointSeq &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_points = std::move(x.m_points);

    return *this;
}

size_t mPointSeq::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < 100; ++a) {
        current_alignment += mPoint::getMaxCdrSerializedSize(current_alignment);
    }


    return current_alignment - initial_alignment;
}

size_t mPointSeq::getCdrSerializedSize(const mPointSeq &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getCdrSerializedSize(data.sender_info(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.points().size(); ++a) {
        current_alignment += mPoint::getCdrSerializedSize(data.points().at(a), current_alignment);
    }


    return current_alignment - initial_alignment;
}

void mPointSeq::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_sender_info;
    scdr << m_id;
    scdr << m_points;
}

void mPointSeq::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_sender_info;
    dcdr >> m_id;
    dcdr >> m_points;
}

size_t mPointSeq::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool mPointSeq::isKeyDefined() {
    return false;
}

void mPointSeq::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

mLineSeq::mLineSeq() {

    m_id = 0;


}

mLineSeq::~mLineSeq() {
}

mLineSeq::mLineSeq(const mLineSeq &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_points = x.m_points;
}

mLineSeq::mLineSeq(mLineSeq &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_points = std::move(x.m_points);
}

mLineSeq &mLineSeq::operator=(const mLineSeq &x) {
    m_sender_info = x.m_sender_info;
    m_id = x.m_id;
    m_points = x.m_points;

    return *this;
}

mLineSeq &mLineSeq::operator=(mLineSeq &&x) {
    m_sender_info = std::move(x.m_sender_info);
    m_id = x.m_id;
    m_points = std::move(x.m_points);

    return *this;
}

size_t mLineSeq::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < 100; ++a) {
        current_alignment += mLine::getMaxCdrSerializedSize(current_alignment);
    }


    return current_alignment - initial_alignment;
}

size_t mLineSeq::getCdrSerializedSize(const mLineSeq &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += SenderInfo::getCdrSerializedSize(data.sender_info(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.points().size(); ++a) {
        current_alignment += mLine::getCdrSerializedSize(data.points().at(a), current_alignment);
    }


    return current_alignment - initial_alignment;
}

void mLineSeq::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_sender_info;
    scdr << m_id;
    scdr << m_points;
}

void mLineSeq::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_sender_info;
    dcdr >> m_id;
    dcdr >> m_points;
}

size_t mLineSeq::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool mLineSeq::isKeyDefined() {
    return false;
}

void mLineSeq::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}