// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Info.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _INFO_H_
#define _INFO_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Info_SOURCE)
#define Info_DllAPI __declspec( dllexport )
#else
#define Info_DllAPI __declspec( dllimport )
#endif // Info_SOURCE
#else
#define Info_DllAPI
#endif
#else
#define Info_DllAPI
#endif // _WIN32

namespace eprosima {
    namespace fastcdr {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure SenderInfo defined by the user in the IDL file.
 * @ingroup INFO
 */
class SenderInfo {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SenderInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SenderInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SenderInfo that will be copied.
     */
    eProsima_user_DllExport SenderInfo(const SenderInfo &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SenderInfo that will be copied.
     */
    eProsima_user_DllExport SenderInfo(SenderInfo &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SenderInfo that will be copied.
     */
    eProsima_user_DllExport SenderInfo &operator=(const SenderInfo &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SenderInfo that will be copied.
     */
    eProsima_user_DllExport SenderInfo &operator=(SenderInfo &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    inline eProsima_user_DllExport void name(const std::string &_name) {
        m_name = _name;
    }

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    inline eProsima_user_DllExport void name(std::string &&_name) {
        m_name = std::move(_name);
    }

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    inline eProsima_user_DllExport const std::string &name() const {
        return m_name;
    }

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    inline eProsima_user_DllExport std::string &name() {
        return m_name;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const SenderInfo &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint8_t m_id;
    std::string m_name;
};

/*!
 * @brief This class represents the structure mPoint defined by the user in the IDL file.
 * @ingroup INFO
 */
class mPoint {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mPoint();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mPoint();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mPoint that will be copied.
     */
    eProsima_user_DllExport mPoint(const mPoint &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mPoint that will be copied.
     */
    eProsima_user_DllExport mPoint(mPoint &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mPoint that will be copied.
     */
    eProsima_user_DllExport mPoint &operator=(const mPoint &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mPoint that will be copied.
     */
    eProsima_user_DllExport mPoint &operator=(mPoint &&x);

    /*!
     * @brief This function copies the value in member sender_info
     * @param _sender_info New value to be copied in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(const SenderInfo &_sender_info) {
        m_sender_info = _sender_info;
    }

    /*!
     * @brief This function moves the value in member sender_info
     * @param _sender_info New value to be moved in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(SenderInfo &&_sender_info) {
        m_sender_info = std::move(_sender_info);
    }

    /*!
     * @brief This function returns a constant reference to member sender_info
     * @return Constant reference to member sender_info
     */
    inline eProsima_user_DllExport const SenderInfo &sender_info() const {
        return m_sender_info;
    }

    /*!
     * @brief This function returns a reference to member sender_info
     * @return Reference to member sender_info
     */
    inline eProsima_user_DllExport SenderInfo &sender_info() {
        return m_sender_info;
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    inline eProsima_user_DllExport void x(double _x) {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    inline eProsima_user_DllExport double x() const {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline eProsima_user_DllExport double &x() {
        return m_x;
    }

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    inline eProsima_user_DllExport void y(double _y) {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    inline eProsima_user_DllExport double y() const {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline eProsima_user_DllExport double &y() {
        return m_y;
    }

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    inline eProsima_user_DllExport void z(double _z) {
        m_z = _z;
    }

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    inline eProsima_user_DllExport double z() const {
        return m_z;
    }

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    inline eProsima_user_DllExport double &z() {
        return m_z;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mPoint &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    SenderInfo m_sender_info;
    uint8_t m_id;
    double m_x;
    double m_y;
    double m_z;
};

/*!
 * @brief This class represents the structure mLine defined by the user in the IDL file.
 * @ingroup INFO
 */
class mLine {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mLine();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mLine();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mLine that will be copied.
     */
    eProsima_user_DllExport mLine(const mLine &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mLine that will be copied.
     */
    eProsima_user_DllExport mLine(mLine &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mLine that will be copied.
     */
    eProsima_user_DllExport mLine &operator=(const mLine &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mLine that will be copied.
     */
    eProsima_user_DllExport mLine &operator=(mLine &&x);

    /*!
     * @brief This function copies the value in member sender_info
     * @param _sender_info New value to be copied in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(const SenderInfo &_sender_info) {
        m_sender_info = _sender_info;
    }

    /*!
     * @brief This function moves the value in member sender_info
     * @param _sender_info New value to be moved in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(SenderInfo &&_sender_info) {
        m_sender_info = std::move(_sender_info);
    }

    /*!
     * @brief This function returns a constant reference to member sender_info
     * @return Constant reference to member sender_info
     */
    inline eProsima_user_DllExport const SenderInfo &sender_info() const {
        return m_sender_info;
    }

    /*!
     * @brief This function returns a reference to member sender_info
     * @return Reference to member sender_info
     */
    inline eProsima_user_DllExport SenderInfo &sender_info() {
        return m_sender_info;
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member p1
     * @param _p1 New value to be copied in member p1
     */
    inline eProsima_user_DllExport void p1(const mPoint &_p1) {
        m_p1 = _p1;
    }

    /*!
     * @brief This function moves the value in member p1
     * @param _p1 New value to be moved in member p1
     */
    inline eProsima_user_DllExport void p1(mPoint &&_p1) {
        m_p1 = std::move(_p1);
    }

    /*!
     * @brief This function returns a constant reference to member p1
     * @return Constant reference to member p1
     */
    inline eProsima_user_DllExport const mPoint &p1() const {
        return m_p1;
    }

    /*!
     * @brief This function returns a reference to member p1
     * @return Reference to member p1
     */
    inline eProsima_user_DllExport mPoint &p1() {
        return m_p1;
    }

    /*!
     * @brief This function copies the value in member p2
     * @param _p2 New value to be copied in member p2
     */
    inline eProsima_user_DllExport void p2(const mPoint &_p2) {
        m_p2 = _p2;
    }

    /*!
     * @brief This function moves the value in member p2
     * @param _p2 New value to be moved in member p2
     */
    inline eProsima_user_DllExport void p2(mPoint &&_p2) {
        m_p2 = std::move(_p2);
    }

    /*!
     * @brief This function returns a constant reference to member p2
     * @return Constant reference to member p2
     */
    inline eProsima_user_DllExport const mPoint &p2() const {
        return m_p2;
    }

    /*!
     * @brief This function returns a reference to member p2
     * @return Reference to member p2
     */
    inline eProsima_user_DllExport mPoint &p2() {
        return m_p2;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mLine &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    SenderInfo m_sender_info;
    uint8_t m_id;
    mPoint m_p1;
    mPoint m_p2;
};

/*!
 * @brief This class represents the structure mPointSeq defined by the user in the IDL file.
 * @ingroup INFO
 */
class mPointSeq {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mPointSeq();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mPointSeq();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mPointSeq that will be copied.
     */
    eProsima_user_DllExport mPointSeq(const mPointSeq &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mPointSeq that will be copied.
     */
    eProsima_user_DllExport mPointSeq(mPointSeq &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mPointSeq that will be copied.
     */
    eProsima_user_DllExport mPointSeq &operator=(const mPointSeq &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mPointSeq that will be copied.
     */
    eProsima_user_DllExport mPointSeq &operator=(mPointSeq &&x);

    /*!
     * @brief This function copies the value in member sender_info
     * @param _sender_info New value to be copied in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(const SenderInfo &_sender_info) {
        m_sender_info = _sender_info;
    }

    /*!
     * @brief This function moves the value in member sender_info
     * @param _sender_info New value to be moved in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(SenderInfo &&_sender_info) {
        m_sender_info = std::move(_sender_info);
    }

    /*!
     * @brief This function returns a constant reference to member sender_info
     * @return Constant reference to member sender_info
     */
    inline eProsima_user_DllExport const SenderInfo &sender_info() const {
        return m_sender_info;
    }

    /*!
     * @brief This function returns a reference to member sender_info
     * @return Reference to member sender_info
     */
    inline eProsima_user_DllExport SenderInfo &sender_info() {
        return m_sender_info;
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline eProsima_user_DllExport void points(const std::vector<mPoint> &_points) {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline eProsima_user_DllExport void points(std::vector<mPoint> &&_points) {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline eProsima_user_DllExport const std::vector<mPoint> &points() const {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline eProsima_user_DllExport std::vector<mPoint> &points() {
        return m_points;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mPointSeq &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    SenderInfo m_sender_info;
    uint8_t m_id;
    std::vector<mPoint> m_points;
};

/*!
 * @brief This class represents the structure mLineSeq defined by the user in the IDL file.
 * @ingroup INFO
 */
class mLineSeq {
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport mLineSeq();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~mLineSeq();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object mLineSeq that will be copied.
     */
    eProsima_user_DllExport mLineSeq(const mLineSeq &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object mLineSeq that will be copied.
     */
    eProsima_user_DllExport mLineSeq(mLineSeq &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object mLineSeq that will be copied.
     */
    eProsima_user_DllExport mLineSeq &operator=(const mLineSeq &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object mLineSeq that will be copied.
     */
    eProsima_user_DllExport mLineSeq &operator=(mLineSeq &&x);

    /*!
     * @brief This function copies the value in member sender_info
     * @param _sender_info New value to be copied in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(const SenderInfo &_sender_info) {
        m_sender_info = _sender_info;
    }

    /*!
     * @brief This function moves the value in member sender_info
     * @param _sender_info New value to be moved in member sender_info
     */
    inline eProsima_user_DllExport void sender_info(SenderInfo &&_sender_info) {
        m_sender_info = std::move(_sender_info);
    }

    /*!
     * @brief This function returns a constant reference to member sender_info
     * @return Constant reference to member sender_info
     */
    inline eProsima_user_DllExport const SenderInfo &sender_info() const {
        return m_sender_info;
    }

    /*!
     * @brief This function returns a reference to member sender_info
     * @return Reference to member sender_info
     */
    inline eProsima_user_DllExport SenderInfo &sender_info() {
        return m_sender_info;
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(uint8_t _id) {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport uint8_t id() const {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport uint8_t &id() {
        return m_id;
    }

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline eProsima_user_DllExport void points(const std::vector<mLine> &_points) {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline eProsima_user_DllExport void points(std::vector<mLine> &&_points) {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline eProsima_user_DllExport const std::vector<mLine> &points() const {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline eProsima_user_DllExport std::vector<mLine> &points() {
        return m_points;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const mLineSeq &data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    SenderInfo m_sender_info;
    uint8_t m_id;
    std::vector<mLine> m_points;
};

#endif // _INFO_H_