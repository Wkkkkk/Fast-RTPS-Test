// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file InfoPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "InfoPubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

SenderInfoPubSubType::SenderInfoPubSubType() {
    setName("SenderInfo");
    m_typeSize = static_cast<uint32_t>(SenderInfo::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = SenderInfo::isKeyDefined();
    size_t keyLength = SenderInfo::getKeyMaxCdrSerializedSize() > 16 ? SenderInfo::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

SenderInfoPubSubType::~SenderInfoPubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool SenderInfoPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    SenderInfo *p_type = static_cast<SenderInfo *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool SenderInfoPubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    SenderInfo *p_type = static_cast<SenderInfo *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> SenderInfoPubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<SenderInfo *>(data))) +
               4 /*encapsulation*/;
    };
}

void *SenderInfoPubSubType::createData() {
    return reinterpret_cast<void *>(new SenderInfo());
}

void SenderInfoPubSubType::deleteData(void *data) {
    delete (reinterpret_cast<SenderInfo *>(data));
}

bool SenderInfoPubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    SenderInfo *p_type = static_cast<SenderInfo *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             SenderInfo::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || SenderInfo::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

mPointPubSubType::mPointPubSubType() {
    setName("mPoint");
    m_typeSize = static_cast<uint32_t>(mPoint::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = mPoint::isKeyDefined();
    size_t keyLength = mPoint::getKeyMaxCdrSerializedSize() > 16 ? mPoint::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

mPointPubSubType::~mPointPubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool mPointPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    mPoint *p_type = static_cast<mPoint *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool mPointPubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    mPoint *p_type = static_cast<mPoint *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> mPointPubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<mPoint *>(data))) + 4 /*encapsulation*/;
    };
}

void *mPointPubSubType::createData() {
    return reinterpret_cast<void *>(new mPoint());
}

void mPointPubSubType::deleteData(void *data) {
    delete (reinterpret_cast<mPoint *>(data));
}

bool mPointPubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    mPoint *p_type = static_cast<mPoint *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             mPoint::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || mPoint::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

mLinePubSubType::mLinePubSubType() {
    setName("mLine");
    m_typeSize = static_cast<uint32_t>(mLine::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = mLine::isKeyDefined();
    size_t keyLength = mLine::getKeyMaxCdrSerializedSize() > 16 ? mLine::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

mLinePubSubType::~mLinePubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool mLinePubSubType::serialize(void *data, SerializedPayload_t *payload) {
    mLine *p_type = static_cast<mLine *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool mLinePubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    mLine *p_type = static_cast<mLine *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> mLinePubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<mLine *>(data))) + 4 /*encapsulation*/;
    };
}

void *mLinePubSubType::createData() {
    return reinterpret_cast<void *>(new mLine());
}

void mLinePubSubType::deleteData(void *data) {
    delete (reinterpret_cast<mLine *>(data));
}

bool mLinePubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    mLine *p_type = static_cast<mLine *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             mLine::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || mLine::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

mPointSeqPubSubType::mPointSeqPubSubType() {
    setName("mPointSeq");
    m_typeSize = static_cast<uint32_t>(mPointSeq::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = mPointSeq::isKeyDefined();
    size_t keyLength = mPointSeq::getKeyMaxCdrSerializedSize() > 16 ? mPointSeq::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

mPointSeqPubSubType::~mPointSeqPubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool mPointSeqPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    mPointSeq *p_type = static_cast<mPointSeq *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool mPointSeqPubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    mPointSeq *p_type = static_cast<mPointSeq *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> mPointSeqPubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<mPointSeq *>(data))) + 4 /*encapsulation*/;
    };
}

void *mPointSeqPubSubType::createData() {
    return reinterpret_cast<void *>(new mPointSeq());
}

void mPointSeqPubSubType::deleteData(void *data) {
    delete (reinterpret_cast<mPointSeq *>(data));
}

bool mPointSeqPubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    mPointSeq *p_type = static_cast<mPointSeq *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             mPointSeq::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || mPointSeq::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

mLineSeqPubSubType::mLineSeqPubSubType() {
    setName("mLineSeq");
    m_typeSize = static_cast<uint32_t>(mLineSeq::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
    m_isGetKeyDefined = mLineSeq::isKeyDefined();
    size_t keyLength = mLineSeq::getKeyMaxCdrSerializedSize() > 16 ? mLineSeq::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

mLineSeqPubSubType::~mLineSeqPubSubType() {
    if (m_keyBuffer != nullptr)
        free(m_keyBuffer);
}

bool mLineSeqPubSubType::serialize(void *data, SerializedPayload_t *payload) {
    mLineSeq *p_type = static_cast<mLineSeq *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->max_size); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                               eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try {
        p_type->serialize(ser); // Serialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
    return true;
}

bool mLineSeqPubSubType::deserialize(SerializedPayload_t *payload, void *data) {
    mLineSeq *p_type = static_cast<mLineSeq *>(data); //Convert DATA to pointer of your type
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data),
                                             payload->length); // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                                 eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try {
        p_type->deserialize(deser); //Deserialize the object:
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/) {
        return false;
    }

    return true;
}

std::function<uint32_t()> mLineSeqPubSubType::getSerializedSizeProvider(void *data) {
    return [data]() -> uint32_t {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<mLineSeq *>(data))) + 4 /*encapsulation*/;
    };
}

void *mLineSeqPubSubType::createData() {
    return reinterpret_cast<void *>(new mLineSeq());
}

void mLineSeqPubSubType::deleteData(void *data) {
    delete (reinterpret_cast<mLineSeq *>(data));
}

bool mLineSeqPubSubType::getKey(void *data, InstanceHandle_t *handle, bool force_md5) {
    if (!m_isGetKeyDefined)
        return false;
    mLineSeq *p_type = static_cast<mLineSeq *>(data);
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             mLineSeq::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
    eprosima::fastcdr::Cdr ser(fastbuffer,
                               eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
    p_type->serializeKey(ser);
    if (force_md5 || mLineSeq::getKeyMaxCdrSerializedSize() > 16) {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_md5.digest[i];
        }
    } else {
        for (uint8_t i = 0; i < 16; ++i) {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

