// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Vec.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Vec.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>

using namespace eprosima::fastcdr::exception;

#include <utility>

mPointVec::mPointVec() {
    m_id = 0;


}

mPointVec::~mPointVec() {
}

mPointVec::mPointVec(const mPointVec &x) {
    m_id = x.m_id;
    m_points = x.m_points;
}

mPointVec::mPointVec(mPointVec &&x) {
    m_id = x.m_id;
    m_points = std::move(x.m_points);
}

mPointVec &mPointVec::operator=(const mPointVec &x) {
    m_id = x.m_id;
    m_points = x.m_points;

    return *this;
}

mPointVec &mPointVec::operator=(mPointVec &&x) {
    m_id = x.m_id;
    m_points = std::move(x.m_points);

    return *this;
}

size_t mPointVec::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < 100; ++a) {
        current_alignment += mPoint::getMaxCdrSerializedSize(current_alignment);
    }


    return current_alignment - initial_alignment;
}

size_t mPointVec::getCdrSerializedSize(const mPointVec &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.points().size(); ++a) {
        current_alignment += mPoint::getCdrSerializedSize(data.points().at(a), current_alignment);
    }


    return current_alignment - initial_alignment;
}

void mPointVec::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_id;
    scdr << m_points;
}

void mPointVec::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_id;
    dcdr >> m_points;
}

size_t mPointVec::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool mPointVec::isKeyDefined() {
    return false;
}

void mPointVec::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}

mLineVec::mLineVec() {
    m_id = 0;


}

mLineVec::~mLineVec() {
}

mLineVec::mLineVec(const mLineVec &x) {
    m_id = x.m_id;
    m_points = x.m_points;
}

mLineVec::mLineVec(mLineVec &&x) {
    m_id = x.m_id;
    m_points = std::move(x.m_points);
}

mLineVec &mLineVec::operator=(const mLineVec &x) {
    m_id = x.m_id;
    m_points = x.m_points;

    return *this;
}

mLineVec &mLineVec::operator=(mLineVec &&x) {
    m_id = x.m_id;
    m_points = std::move(x.m_points);

    return *this;
}

size_t mLineVec::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < 100; ++a) {
        current_alignment += mLine::getMaxCdrSerializedSize(current_alignment);
    }


    return current_alignment - initial_alignment;
}

size_t mLineVec::getCdrSerializedSize(const mLineVec &data, size_t current_alignment) {
    (void) data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.points().size(); ++a) {
        current_alignment += mLine::getCdrSerializedSize(data.points().at(a), current_alignment);
    }


    return current_alignment - initial_alignment;
}

void mLineVec::serialize(eprosima::fastcdr::Cdr &scdr) const {
    scdr << m_id;
    scdr << m_points;
}

void mLineVec::deserialize(eprosima::fastcdr::Cdr &dcdr) {
    dcdr >> m_id;
    dcdr >> m_points;
}

size_t mLineVec::getKeyMaxCdrSerializedSize(size_t current_alignment) {
    size_t current_align = current_alignment;


    return current_align;
}

bool mLineVec::isKeyDefined() {
    return false;
}

void mLineVec::serializeKey(eprosima::fastcdr::Cdr &scdr) const {
    (void) scdr;


}